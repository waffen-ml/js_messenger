select c.*, w.id as lm_id, w.local_id as lm_local_id, w.sender_id as lm_sender_id,
	w.text as lm_text, w.datetime as lm_datetime, w.name as lm_sender_name,
    w.tag as lm_sender_tag, w.sender_id as lm_sender_id, w.lm_file_count, b.user_id as member_id,
    b.name as member_name, b.tag as member_tag
from chat c left join (
	select m.*, u.name, u.tag, (select count(*) from file f where f.bundle_id=m.bundle_id) as lm_file_count,
    u.name as lm_sender_name, u.tag as lm_sender_tag from (select * from message where chat_id=1 order by id desc limit 1)
    m left join user u on u.id = m.sender_id)
	w on w.chat_id=c.id
left join (
	select b.*, u.name, u.tag from chat_member b left join user u on u.id=b.user_id where chat_id=1 limit 4) 
	b on b.chat_id=c.id where c.id=1

SET sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));

select v.focus, v.last_read, c.name as chat_name, w.* from chat_view v left join
(select m.chat_id, m.id as lm_id, m.local_id as lm_local_id,
	m.sender_id as lm_sender_id, m.text as lm_text, m.datetime as lm_datetime,
    u.name as lm_sender_name, u.tag as lm_sender_tag,
	(select count(*) from file f where f.bundle_id=m.bundle_id) as lm_file_count
	from message m 
	join (select max(id) as max_id from message group by chat_id) w on w.max_id=m.id
    left join user u on u.id = m.sender_id
) w on w.chat_id=v.chat_id
left join chat c on c.id=v.chat_id


const multer = require('multer')
const path = require('path')
const utils = require('./utils')
const tempSuffixLength = 4
const tempFolder = path.join(__dirname, '..', 'tempfiles')
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, tempFolder);
    },
    filename: (req, file, cb) => {
        let suffix = utils.addLeadingZeros(utils.getRandomInt(
            0, Math.pow(10, tempSuffixLength) - 1), tempSuffixLength);
        cb(null, Date.now() + suffix + path.extname(file.originalname));
    }
});
const upload = multer({storage: storage});
const fs = require('fs');

function tempPath(w) {
    return path.join(tempFolder, w)
}

class Files {
    constructor(cfx) {
        this.cfx = cfx;
    }

    deleteTempFiles(tempFiles) {
        tempFiles.forEach(f => fs.unlink(f.path, () => {}));
    }

    transferTempFiles(tempFiles, ids, folder) {
        tempFiles.forEach((file, i) => {
            let newPath = dbAbsPath(folder, ids[i] + path.extname(file.originalname))
            fs.copyFile(file.path, newPath, (err) => {
                fs.unlink(file.path, () => {})
            })
        })
    }

    getFileInfo(id) {
        return this.cfx.query(`select f.*, ff.name as folder_name 
            from file f left join file_folder ff on ff.id = f.folder_id where f.id=${id}`)
        .then(r => {
            return r.length? r[0] : null
        })
    }

    saveFiles(tempFiles, folder, bundle) {

        if(!tempFiles || !tempFiles.length)
            return Promise.resolve(null)

        bundle = Number(bundle)
        
        let bundle_request = !bundle? null : bundle > 0? bundle :
            '(max(bundle_id) + 1) from file';

        let union = tempFiles.map(f => {
            let p = path.parse(f.originalname)
            return [p.name, utils.simplifyMimetype(f.mimetype), p.ext.substring(1)]
        }).map(t => `select ` + t.map(w => `"${w}"`).join(', '))
        .join(' union all ')
        
        return this.cfx.query(`
            insert into file(name, mimetype, extension, folder_id, bundle_id) 
            select u.*, (select id from file_folder where name="${folder}") or 1,
            (select ${bundle_request}) from (${union}) u
        `).then(r => {
            return this.cfx.query(`select ${r.insertId} as insert_id,
                ff.name as folder_name, f.bundle_id from file f left join 
                file_folder ff on ff.id=f.folder_id where f.id=${r.insertId}`)
        }).then(r => {
            let insertId = r[0].insert_id
            let bundle = r[0].bundle_id
            let folder = r[0].folder_name

            let ids = []
            for(let i = 0; i < tempFiles.length; i++)
                ids.push(insertId + i)

            this.transferTempFiles(tempFiles, ids, folder)
            
            return {
                ids: ids,
                bundle: bundle,
                folder: folder
            }
        })
    }

    clearTempFolder() {

    }
}

const Form = require('./forms').Form

exports.init = (cfx) => {
    if(!cfx.db || !cfx.forms)
        return true;
    
    cfx.forms.addForm(new Form({name: 'filetest', title: 'Фаил тест'},
    [
        {type: 'text', title: 'Папка', name: 'folder', optional: true, placeholder: 'default'},
        {type: 'file', title: 'Файлы', name: 'files', limit: 10},
    ],
    (data, erf, cfx) => {
        //console.log(data)
    },
    (data, out, cfx) => {
        cfx.files.saveFiles(data.files, null, 1)
        
    }
    ))

    cfx.core.app.get('/file', (req, res, next) => {
        cfx.files.getFileInfo(req.query.id)
        .then(info => {
            if (!info)
                throw Error('Unknown file')

            let filePath = dbAbsPath(info.folder_name, info.id + '.' + info.extension)

            if (req.query.download || req.query.d)
                res.download(filePath, info.name + '.' + info.extension)
            else
                res.sendFile(filePath)
        })
        .catch(err => {
            next(err)
        }) 
    });


    cfx.core.upload = upload;
    cfx.files = new Files(cfx);
}