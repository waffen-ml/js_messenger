<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="src/style.css">
  </head>
  <body style="display:flex;flex-direction:column;gap:6px">
    <textarea class="entry" style="resize:both"></textarea>
    <button onclick="compilePost()">Compile</button>
    <div class="post" style="background:white; min-height:50px;min-width:200px;"></div>
    <script src="src/script.js"></script>
  </body>
</html>

function toggleStream(stream, state) {
    stream.getAudioTracks().forEach(t => {
        t.enabled = state
    })
}

class CallInterface {

    constructor() {
        this.voiceChatTab = document.querySelector('.voice-chat')
        this.voiceChatMemberList = document.querySelector('.voice-controls .members')

        this.updateHeaderCallButtons(false)
    }

    setupStreamMuteButton(stream, button, onEnabledLabel, onMutedLabel) {
        if(!stream)
            return
    
        let muted = false
        button.textContent = onEnabledLabel
    
        button.addEventListener('click', () => {
            muted = !muted
            toggleStream(stream, !muted)
            button.textContent = muted? onMutedLabel : onEnabledLabel
        })
    }
    
    displayMemberControls(member) {
        if (!member.call) {
            console.log('call is missing!')
            console.log(member)
            return
        } else {
            console.log('displaying')
            console.log(member)
        }
    
        let li = document.createElement('li')
        li.classList.add('member')
        li.setAttribute('id', 'member' + member.id)
        
        let avatar = document.createElement('img')
        avatar.setAttribute('src', '/file?id=169904737598173031.jpg')
        avatar.classList.add('avatar')
    
        let name = document.createElement('span')
        name.classList.add('name')
        name.classList.add('finite')
        name.textContent = member.name
    
        let volumeRange = document.createElement('input')
        volumeRange.setAttribute('type', 'range')
        volumeRange.setAttribute('min', 0)
        volumeRange.setAttribute('max', 100)
        volumeRange.setAttribute('step', 1)
        volumeRange.setAttribute('value', 100)
        volumeRange.classList.add('volume-range')
    
        let volumeLabel = document.createElement('span')
        volumeLabel.classList.add('volume-label')
        volumeLabel.textContent = '100%'
    
        let mute = document.createElement('button')
        mute.classList.add('mute')
    
        this.setupStreamMuteButton(member.stream, mute, 'Слышен', 'Заглушен')
    
        volumeRange.addEventListener('change', () => {
            member.audio.volume = volumeRange.value / 100;
            volumeLabel.textContent = volumeRange.value + '%'
        })
    
        li.appendChild(avatar)
        li.appendChild(name)
        li.appendChild(volumeRange)
        li.appendChild(volumeLabel)
        li.appendChild(mute)
    
        this.voiceChatMemberList.appendChild(li)
    }

    removeMemberControls(member) {
        let el = this.voiceChatMemberList.querySelector('#member' + member.id)
        if (el) this.voiceChatMemberList.removeChild(el)
    }

    showControls() {
        this.voiceChatTab.classList.add('active')
        this.voiceChatTab.classList.remove('hidden')
    }

    clearControls() {
        this.voiceChatMemberList.innerHTML = ''
    }

    updatePreview(callTable) {
        this.voiceChatTab.setAttribute('style', '')
        this.voiceChatTab.classList.remove('active')
        this.voiceChatTab.classList.remove('hidden')
        
        if (!callTable || !Object.keys(callTable).length) {
            this.voiceChatTab.classList.add('hidden')
            return
        }
    
        let members = Object.values(callTable)
        let c = members.length
        
        let w = this.voiceChatTab.querySelector('.count span')
        
        if (c > 10 && c < 20 || c % 10 >= 5 || c % 10 == 0)
            w.textContent = 'участников'
        else if(c%10 == 1)
            w.textContent = 'участник'
        else
            w.textContent = 'участника'
    
        this.voiceChatTab.querySelector('.count .num').textContent = c
    
        let k = Math.min(members.length, 5)
        let s = members.slice(members.length - k).reverse().map(w => w.name).join(', ')
        if (k < members.length)
            s += '...'
    
        this.voiceChatTab.querySelector('.list').textContent = 'В звонке: ' + s
    }

    updateHeaderCallButtons(call) {
        let join = document.querySelector('.chat-header .join-call')
        let leave = document.querySelector('.chat-header .leave-call')
        join.style.display = call? 'none' : 'block'
        leave.style.display = call? 'block' : 'none'
    }
    
    setupJoinLeaveButtons(call) {
        document.querySelector('.join-call').addEventListener('click', () => {
            if(call.isCallGoing())
                return
            call.enterVoiceChat()
        })

        document.querySelector('.leave-call').addEventListener('click', () => {
            if(!call.isCallGoing())
                return
            call.leaveVoiceChat()
        })
    }

}

class Call {

    constructor(me, chatid, socket) {
        this.me = me
        this.interface = new CallInterface()
        this.peer = null
        this.stream = null
        this.callTable = null
        this.socket = socket
        this.chatid = chatid

        //this.getStream()
        this.setupSocketEvents()
        this.requestCallTable()
        this.interface.setupJoinLeaveButtons(this)
    }

    isCallGoing() {
        return Boolean(this.peer)
    }

    requestCallTable() {
        fetch('/getcalltable?chatid=' + this.chatid)
        .then(r => r.json())
        .then(r => {
            this.callTable = r.table
            console.log(r.table)
            this.interface.updatePreview(this.callTable)
        })
    }

    doesCallContainUser(userid) {
        if(!this.callTable) return false
        return Object.values(this.callTable).some((v) => v.id == userid)
    }

    setupSocketEvents() {
        this.socket.on('call-member-disconnected', (peerid) => {
            console.log('disconnected ' + peerid)
            this.removeMember(this.callTable[peerid])
        })
        
        this.socket.on('new-call-member', (user) => {
            
            this.callTable[user.peer] = user

            console.log(user)

            if (!this.peer) {
                this.interface.updatePreview(this.callTable)
                return
            } else if(user.id == this.me.id)
                return
            
            const call = this.peer.call(user.peer, this.stream)
        
            call.on('stream', userStream => {
                this.connectToMember(call, userStream)
            });
        
            call.on('close', () => {
        
            })
        })
        
    }

    getStream() {
        navigator.mediaDevices.getUserMedia({
            'audio': true,
            'video': false
        }).then(stream => {
           this.stream = stream
           this.interface.setupStreamMuteButton(stream, 
               document.querySelector('.personal .mute'),
               'Включен', 'Выключен')
        }).catch(err => {
            alert('Не удалось получить доступ к аудио: ' + err)
        })
    }

    connectToMember(call, userStream) {
        let user = this.callTable? this.callTable[call.peer] : null
        
        if (!user || user.id == this.me.id) {
            console.log('i cant have it')
            console.log(user)
            return
        }

        user.call = call
        user.stream = userStream
        user.audio = document.createElement('audio')
        user.audio.srcObject = userStream
        user.audio.autoplay = true
        this.interface.displayMemberControls(user)
    }

    destroyPeer() {
        this.peer.destroy()
        this.peer = null
    }

    enterVoiceChat() {
        if(!this.stream || !this.callTable ||
            this.peer || this.doesCallContainUser(this.me.id)) {
            alert('Невозможно начать разговор.')
            return
        }
        
        toggleStream(this.stream, true)
        this.interface.clearControls()

        this.peer = new Peer(undefined, {
            host: '/',
            port: '3001',
            secure: true
        });
    
        this.peer.on('open', peerid => {
            this.peer.peerid = peerid
            fetch('/joincall?chatid=' + this.chatid + '&peerid=' + peerid)
            .then(r => r.json())
            .then(r => {
                if (!r.success) {
                    alert('Не удалось подключиться.')
                    this.destroyPeer()
                    return
                }
                this.interface.updateHeaderCallButtons(true)
                this.interface.showControls()
            })
        })
    
        this.peer.on('call', call => {
            call.answer(this.stream)
            call.on('stream', userStream => {
                console.log('connected to me: ' + call.peer)
                this.connectToMember(call, userStream)
            })
        })
    }

    removeMember(member) {
        if(!member)
            return
        this.deleteMemberAudio(member)
        delete this.callTable[member.peer]
        if (!this.peer)
            this.interface.updatePreview(this.callTable)
        else
            this.interface.removeMemberControls(member)
    }

    deleteMemberAudio(member) {
        if(member && member.audio)
            member.audio.remove()
    }

    leaveVoiceChat() {
        if(!this.peer)
            return

        delete this.callTable[this.peer.peerid]
        this.socket.emit('end-call')
        this.destroyPeer()
    
        Object.values(this.callTable).forEach(this.deleteMemberAudio)
    
        this.interface.updatePreview(this.callTable)
        this.interface.updateHeaderCallButtons(false)
    }
}


userids.map(async uid => {
            let existResponse = await this.cfx.query(`select * from chat_member where chat_id=? and user_id=?`, [this.id, uid])

            if(existResponse.length > 0)
                return

            await this.cfx.query(`insert into chat_member(chat_id, user_id, last_read, focus) values (?, ?, ?, ?)`,
                [this.id, uid, lmid, lmid + 1])

            let user = await this.cfx.auth.getUser(uid)
            user.is_admin = false
            user.is_owner = false

            this.cfx.socket.io.in('c:' + this.id).emit('new_member', user)
            
            if(exec) {
                await this.addMembers('system', null, `@${exec.tag} добавил @${user.tag} в чат`)
            }
        })